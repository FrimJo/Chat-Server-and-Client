package application;

import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.ListView;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;

import java.io.IOException;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.ResourceBundle;


public class Client_GUI implements GUI_Interface_Client{

    @FXML
    private ResourceBundle resources;

    @FXML
    private URL location;

    @FXML
    private Button connectButton;
    
    @FXML
    private Button exitButton;
    
    @FXML
    private Button whoIs;
    
    @FXML
    private ListView<ServerInfo> ServerView;
    
    @FXML
    private ListView<String> nickView;
    
    @FXML
    private TextField inputField;
    
    @FXML
    private TextArea outputArea;
   
    @FXML
    void connectPressed(ActionEvent event) {
    	println("Trying to connect to server . . . .");
    	new Thread(){
    		@Override
    		public void run(){
    			
    	    	ServerInfo selected = ServerView.getSelectionModel().getSelectedItem();
    	    	
    	    	String server_ip = selected.getInetAddress().getHostAddress();
    	    	int server_port = selected.getServerPort();
    	    	String nick = "Fredde";
    	    	
    	    	println("server_ip: " + server_ip);
    	    	println("server_port: " + server_port);
    	    	println("nick: " + nick);
    	    	
    	    	try {
    				Client.INSTANCE.connectToServer(server_ip, server_port, nick);
    				println("Connected to server.");
    	    	} catch (UnknownHostException e) {
    	    		println("Couldn't connect to server. UnknownHostException");
    			} catch (IOException e1) {
    				println("Couldn't connect to server. IOException");
    			}
    		}
    	};
    }

    @FXML
    void exitPressed(ActionEvent event) {
    	try {
			Client.INSTANCE.shutDown();
		} catch (IOException e) {
			e.printStackTrace();
		}
    	Platform.exit();
    }
    
    @FXML
    void inputEnter(ActionEvent event) {
    	String command = this.inputField.getText();
		if( command.split(" ", 2)[0].equals("connect") ){
			String ipAndPort = command.split(" ", 2)[1];
			String server_ip = ipAndPort.split(":", 2)[0];
			
			int server_port = Integer.parseInt( ipAndPort.split(":", 2)[1] );
			
			try {
				println("Trying to connect to server . . . .");
				Client.INSTANCE.connectToServer(server_ip, server_port, "Fredde");
				println("Connected to server.");
	    	} catch (UnknownHostException e) {
	    		println("Couldn't connect to server. UnknownHostException");
			} catch (IOException e1) {
				println("Couldn't connect to server. IOException");
			}
			
			
		}
		this.inputField.setText("");
    }
    
    @FXML
    void whoIsPressed(ActionEvent event) {
    	String nick = this.nickView.getSelectionModel().getSelectedItem();
    	Client.INSTANCE.getUserInfo(nick, 0);
    }
    
    @FXML
    void initialize() {
    	assert whoIs != null : "fx:id=\"whoIs\" was not injected: check your FXML file 'Client_GUI_Blueprint.fxml'.";
    	assert nickView != null : "fx:id=\"nickView\" was not injected: check your FXML file 'Client_GUI_Blueprint.fxml'.";
    	assert ServerView != null : "fx:id=\"ServerView\" was not injected: check your FXML file 'Client_GUI_Blueprint.fxml'.";
        assert connectButton != null : "fx:id=\"connectButton\" was not injected: check your FXML file 'Client_GUI_Blueprint.fxml'.";
        assert exitButton != null : "fx:id=\"exitButton\" was not injected: check your FXML file 'Client_GUI_Blueprint.fxml'.";
        assert inputField != null : "fx:id=\"inputField\" was not injected: check your FXML file 'Client_GUI_Blueprint.fxml'.";
        assert outputArea != null : "fx:id=\"outputArea\" was not injected: check your FXML file 'Client_GUI_Blueprint.fxml'.";
        
        Client.INSTANCE.init(this);
    }


	@Override
	public void print(String str) {
		this.outputArea.appendText(str);
	}


	@Override
	public void println(String str) {
		this.outputArea.appendText(str+"\n");
	}


	@Override
	public void start() {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public String in(String str) {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public void receiveListOfServers(ArrayList<ServerInfo> serverList){
		ObservableList<ServerInfo> servers = FXCollections.observableArrayList();
		servers.addAll(serverList);
		this.ServerView.setItems(servers);
	}
	
	@Override
	public void receiveListOfNicks(String[] nickList){
		ObservableList<String> nicks = FXCollections.observableArrayList();
		nicks.addAll(nickList);
		this.nickView.setItems(nicks);
	}
}

