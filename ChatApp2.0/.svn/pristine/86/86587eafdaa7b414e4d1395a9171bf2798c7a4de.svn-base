package application;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;
import java.util.zip.ZipException;


public class PDU_Factory {
	
	public static PDU reg(InetAddress dns_address, int dns_port, String topic) {
		byte length = (byte) topic.length();
		topic = appendZeros(topic);
		PDU message = new PDU(8 + topic.length());
		message.setByte(0, (byte) OpCodes.REG);
		message.setByte(1, (byte) length);
		message.setShort(2, (short) dns_port);
		message.setSubrange(4, dns_address.getAddress());
		message.setSubrange(8, topic.getBytes());
		
		return message;
	}
	
	public static PDU alive(int id, int nrOfClients) {
		PDU message = new PDU(4);
		
		message.setByte(0, (byte) OpCodes.ALIVE);
		message.setByte(1, (byte) nrOfClients);
		message.setShort(2, (short) id);
		
		return message;
	}
	
	public static PDU chtopic(String topic) {
		byte length = (byte) topic.length();
		topic = appendZeros(topic);
		
		PDU message = new PDU(4 + topic.length());
		
		message.setByte(0, (byte) OpCodes.CHTOPIC);
		message.setByte(1, (byte) length);
		message.setSubrange(2, new byte[]{'\0','\0'} );
		message.setSubrange(4, topic.getBytes());
		
		System.out.println("\nGenerate package CHTOPIC");
		System.out.println("OpCode: "+ message.getByte(0));
		System.out.println("Length of topic: "+ message.getByte(1));
		System.out.println("Pad: "+ message.getShort(2) );
		System.out.println("Topic: " + new String( message.getSubrange(4, message.getByte(1)) ));
		
		return message;
	}
	
	public static PDU chtopic(int id, String topic) {
		byte length = (byte) topic.length();
		topic = appendZeros(topic);
		
		PDU message = new PDU(4 + topic.length());
		
		message.setByte(0, (byte) OpCodes.CHTOPIC);
		message.setByte(1, (byte) length);
		message.setShort(2, (short) id );
		message.setSubrange(4, topic.getBytes());
		
		System.out.println("\nGenerate package CHTOPIC");
		System.out.println("OpCode: "+ message.getByte(0));
		System.out.println("Length of topic: "+ message.getByte(1));
		System.out.println("ID: "+ message.getShort(2) );
		System.out.println("Topic: " + new String( message.getSubrange(4, message.getByte(1)) ));
		
		return message;
	}
	
	public static PDU notreg() {
		PDU message = new PDU(4);
		
		message.setByte(0, (byte) OpCodes.NOTREG);
		message.setSubrange(1, new byte[] {'\0', '\0', '\0'});

		return message;
	}
	
	public static PDU getlist() {
		
		PDU message = new PDU(4);
		
		message.setByte(0, (byte) OpCodes.GETLIST);
		message.setSubrange(1, new byte[] {'\0', '\0', '\0'});

		return message;
	}
	
	public static PDU message(int type, String text, String cryptKey) throws WrongCryptTypeException, UnsupportedEncodingException{
		System.out.println("\nGenerate package MESSAGE");
		
		//PDU messageText = new PDU(0);
		byte[] message;
		int textOldLength = text.length();
		System.out.println("textOldLength: " + textOldLength);
		
		switch (type) {
		case MsgTypes.TEXT:
			System.out.println("MsgTypes.TEXT");
			text = appendZeros(text);
			message = text.getBytes("UTF-8");
			break;
			
		case MsgTypes.COMP:
			System.out.println("MsgTypes.COMP");
			byte[] compText = {'\0'};
			 try {
				System.out.println("Text fore comp: " + text);
				compText = compress(text);
				System.out.println("Decompr: " + deCompress(compText) );
				
			} catch (Exception e) {
				System.err.println("Could not compress message text");
				e.printStackTrace();
			}
			
			System.out.println("Generating COMP MESSAGE");
			PDU compMessage = new PDU(8 + compText.length);
				
			compMessage.setByte(0, (byte) 0);
			System.out.println("Algoritm: " + compMessage.getByte(0));
			compMessage.setByte(1, (byte) '\0');
			System.out.println("Pad: " + compMessage.getByte(1));
			compMessage.setShort(2, (short) compText.length);
			System.out.println("Med. längd kom: " + compMessage.getShort(2));
			compMessage.setShort(4, (short) textOldLength);
			System.out.println("Med. längd okom: " + compMessage.getShort(4));
			compMessage.setSubrange(6, new byte[] {'\0', '\0'});
			System.out.println("Pad: " + compMessage.getShort(6));
			compMessage.setSubrange(8, compText);
			compMessage.setByte(1, Checksum.calc(compMessage.getBytes(), compMessage.length()));
			System.out.println("Checksum: " + compMessage.getByte(1));
			message = compMessage.getBytes();
			
			
			
			
			
			
			
			break;
			
			/*case MsgTypes.CRYPT:
			System.out.println("MsgTypes.CRYPT");
			Crypt.encrypt(text.getBytes(), text.length(), cryptKey.getBytes(), cryptKey.length());
			messageText = new PDU(8 + text.length());
			
			messageText.setByte(0, (byte) 0);
			messageText.setByte(1, Checksum.calc(text.getBytes(), text.length()));
			messageText.setShort(2, (short) text.length());
			messageText.setShort(4, (short) textOldLength);
			messageText.setSubrange(6, new byte[] {'\0', '\0'});
			messageText.setSubrange(8, text.getBytes());
			break;
		case MsgTypes.COMPCRYPT:
			System.out.println("MsgTypes.COMPCRYPT");
			try {
				text = compress(text);
				text = appendZeros(text);
				PDU kompPDU = new PDU(8 + text.length());
				
				kompPDU.setByte(0, (byte) 0);
				kompPDU.setByte(1, Checksum.calc(text.getBytes(), text.length()));
				kompPDU.setShort(2, (short) text.length());
				kompPDU.setShort(4, (short) textOldLength);
				kompPDU.setSubrange(6, new byte[] {'\0', '\0'});
				kompPDU.setSubrange(8, text.getBytes());
				
				int kompOldPDULength = kompPDU.length();
				
				Crypt.encrypt(kompPDU.getBytes(), kompPDU.length(), cryptKey.getBytes(), cryptKey.length());
				
				messageText = new PDU(8 + kompPDU.length());
				
				messageText.setByte(0, (byte) 0);
				messageText.setByte(1, Checksum.calc(kompPDU.getBytes(), kompPDU.length()));
				messageText.setShort(2, (short) kompPDU.length());
				messageText.setShort(4, (short) kompOldPDULength);
				messageText.setSubrange(6, new byte[] {'\0', '\0'});
				messageText.setSubrange(8, kompPDU.getBytes());
				
			} catch (IOException e) {
				System.err.println("could not compress text2");
			}
			
			break;*/
		default:
			throw new WrongCryptTypeException();
			
		}
		
		//text = appendZeros(text);
		
		PDU pdu = new PDU(12 + message.length);
		
		pdu.setByte(0, (byte) OpCodes.MESSAGE);
		pdu.setByte(1, (byte) type);
		pdu.setByte(2, (byte) '\0');
		pdu.setByte(3, (byte) '\0' );
		pdu.setShort(4, (short) message.length);
		pdu.setSubrange(6, new byte[] {'\0', '\0'});
		pdu.setSubrange(8, new byte[] {'\0', '\0', '\0', '\0'});
		pdu.setSubrange(12, message);
		
		System.out.println("pdu.length(): " + pdu.length());
		byte checksum = Checksum.calc(pdu.getBytes(), pdu.length());

		System.out.println("checksum: " + checksum );

		pdu.setByte(3, checksum);
		
		checksum = Checksum.calc(pdu.getBytes(), pdu.length());
		System.out.println("checksum after: " + checksum );
		return pdu;
	}
	
	/*public static String deCompress(byte[] bytes) {
		byte [] tempBytes = new byte[6000];
		
		if (bytes == null || bytes.length == 0) {
	        return "";
	    }
		try {	
		    InputStream in = new ByteArrayInputStream(bytes);
		    GZIPInputStream gzip = new GZIPInputStream(in, bytes.length); 
	
			gzip.read(tempBytes);
		    gzip.close();
		    in.close();
			} catch (ZipException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
	    return new String(tempBytes);
	}
	
	private static byte[] compress(String str) throws UnsupportedEncodingException {
		byte[] bytes = null;
		if (str == null || str.length() == 0) {
	        return bytes;
	    }
		try {
			
			ByteArrayOutputStream out = new ByteArrayOutputStream();
			Writer writer = new OutputStreamWriter(new GZIPOutputStream(out), "UTF-8");
			writer.write(str);
			bytes = out.toByteArray();
			
		    writer.flush();
		    writer.close();
		    out.close();
		} catch (EOFException e2) {
			e2.printStackTrace();
		} catch (ZipException e1) {
			e1.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	    return bytes;
	}*/
	
	public static byte[] compress(String str) throws Exception {
        if (str == null || str.length() == 0) {
            return null;
        }
        System.out.println("String length : " + str.length());
        ByteArrayOutputStream obj=new ByteArrayOutputStream();
        GZIPOutputStream gzip = new GZIPOutputStream(obj);
        gzip.write(str.getBytes("UTF-8"));
        gzip.close();
        String outStr = obj.toString("UTF-8");
        System.out.println("Output String length : " + outStr.length());
        return obj.toByteArray();
     }

      public static String deCompress(byte[] bytes) throws IOException {
        if (bytes == null || bytes.length == 0) {
            return "";
        }
        System.out.println("Input String length : " + bytes.length);
        GZIPInputStream gis;
		gis = new GZIPInputStream(new ByteArrayInputStream(bytes));
        BufferedReader bf = new BufferedReader(new InputStreamReader(gis, "UTF-8"));
        String outStr = "";
        String line;
        while ((line=bf.readLine())!=null) {
          outStr += line;
        }
        System.out.println("Output String lenght : " + outStr.length());
        return outStr;
     }
	
	
	public static boolean checksum(PDU pdu, int index){
		
		byte orgChecksum = (byte) pdu.getByte(index);
		System.out.println("orgChecksum: " + orgChecksum);
		pdu.setByte(index, (byte) '\0');
		byte newChecksum = Checksum.calc(pdu.getBytes(), pdu.length() );
		System.out.println("newChecksum: " + newChecksum);
		pdu.setByte(index, (byte) orgChecksum);
		return orgChecksum == newChecksum;
	}

	public static PDU quit(String nick) {
		PDU message = new PDU(4);
		
		message.setByte(0, (byte) OpCodes.QUIT);
		message.setSubrange(1, new byte[] {'\0', '\0', '\0'});

		return message;
	}
		

	
	
	public static PDU join(String nick) {
		int nickLenght = nick.length(); 
		nick = appendZeros(nick);

		/* Generate a PDU-message to use when
		 * connecting  to the server. */
		PDU message = new PDU(4 + nick.length());
		message.setByte(0, (byte) OpCodes.JOIN);
		message.setByte(1, (byte) nickLenght);
		message.setSubrange(2, new byte[] {'\0', '\0'});
		message.setSubrange(4, nick.getBytes());
		
		System.out.println("\nGenerate package JOIN");
		System.out.println("OpCode: "+ message.getByte(0));
		System.out.println("Length of nick: "+ message.getByte(1));
		System.out.println("Pad: "+ message.getShort(2));
		System.out.println("Nick: " + new String( message.getSubrange(4, message.getByte(1)) ));
		System.out.println("Length of package: "+ message.length());
		
		
		return message;
	}
	
	public static PDU nicks(String[] strArray) {

		String str = appendZeros(strArray);

		PDU message = new PDU(4 + str.length());
		message.setByte(0, (byte) OpCodes.NICKS);
		message.setByte(1, (byte) strArray.length);
		message.setShort(2, (short) str.length());
		message.setSubrange(4, str.getBytes() );
		
		System.out.println("\nGenerate package NICKS");
		System.out.println("OpCode: "+ (byte) message.getByte(0));
		System.out.println("Number of connected clients: "+ (byte) message.getByte(1));
		System.out.println("Size of Bytes: "+ (short) message.getShort(2));
		System.out.println("String:" + str);
		return message;
	}
	
	public static PDU whois(String str) {
		str = appendZeros(str);
		
		PDU message = new PDU(4 + str.length());
		message.setByte(0, (byte) OpCodes.WHOIS);
		message.setByte(1, (byte) str.length());
		message.setSubrange(2, new byte[] {'\0', '\0'});
		message.setSubrange(4, str.getBytes());
		
		System.out.println("\nGenerate package WHOIS");
		System.out.println("OpCode: "+ message.getByte(0));
		System.out.println("Length of nick: "+ message.getByte(1));
		System.out.println("Pad: "+ message.getShort(2));
		System.out.println("Nick: " + new String( message.getSubrange(4, message.getByte(1)) ));
		
		return message;
	}
	
	public static PDU uinfo(ToClient c) {
	
		/* Generate the PDU-message User Info. */
		PDU message = new PDU(16);
		message.setByte(0, (byte) OpCodes.UINFO);
		message.setSubrange(1, new byte[]{'\0','\0','\0'});
		message.setSubrange(4, c.getInetAddress().getAddress());
		
		
		System.out.println("\nGenerate package UINFO");
		System.out.println("OpCode: "+ (byte) message.getByte(0));
		System.out.println("Pad: "+ new String( message.getSubrange(1, 3) ));
		try {
			System.out.println("IP: "+ InetAddress.getByAddress( message.getSubrange(4, 4) ).getHostAddress() );
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}

		
		return message;
	}
	
	public static PDU ujoin(String nick, int timeStamp) {
		
		
		
		int nickLength = nick.length(); 
		nick = appendZeros(nick);
		
		PDU message = new PDU(8 + nick.length());
		message.setByte(0, (byte) OpCodes.UJOIN);
		message.setByte(1, (byte) nickLength);
		message.setSubrange(2, new byte[]{'\0','\0'});
		message.setInt(4, timeStamp);
		message.setSubrange(8, nick.getBytes());		
		
		System.out.println("\nGenerate package UJOIN");
		System.out.println("OpCode: "+ (byte) message.getByte(0));
		System.out.println("NickLength: "+ (byte) message.getByte(1));
		System.out.println("Pad: "+ (short) message.getShort(2));
		System.out.println("TimeStamp: "+ (int) message.getInt(4));
		System.out.println("Nick: "+ new String(message.getSubrange(8, message.getByte(1))));
		
		return message;
	}
	
	public static PDU uleave(String nick, int timeStamp) {
		int nickLength = nick.length();
		nick = appendZeros(nick);
		
		PDU message = new PDU(8 + nick.length());

		message.setByte(0, (byte) OpCodes.ULEAVE);
		message.setByte(1, (byte) nickLength);
		message.setSubrange(2, new byte[] {'\0', '\0'});
		message.setInt(4, timeStamp);
		message.setSubrange(8, nick.getBytes());
		
		
		System.out.println("\nGenerate package ULEAVE");
		System.out.println("OpCode: "+ (byte) message.getByte(0));
		System.out.println("NickLength: "+ (byte) message.getByte(1));
		System.out.println("Pad: "+ (short) message.getShort(2));
		System.out.println("TimeStamp: "+ (int) message.getInt(4));
		System.out.println("Nick: "+ new String(message.getSubrange(8, message.getByte(1))));
		
		return message;
	}
	

	public static PDU chnick(String nick) {
		int nickLenght = nick.length(); 
		nick = appendZeros(nick);
		
		
		
		PDU message = new PDU(4 + nick.length());
		message.setByte(0, (byte) OpCodes.CHNICK);
		message.setByte(1, (byte) nickLenght);
		message.setSubrange(2, new byte[] {'\0', '\0'});
		message.setSubrange(4, nick.getBytes());
		
		System.out.println("\nGenerate package CHNICK");
		System.out.println("OpCode: "+ message.getByte(0));
		System.out.println("Length of nick: "+ message.getByte(1));
		System.out.println("Pad: "+ message.getShort(2));
		System.out.println("Nickname: " + new String( message.getSubrange(4, message.getByte(1))) );
		
		return message;
	}
	
	public static PDU ucnick(String nickOld, String nickNew, int timeStamp ) {
		nickOld = appendZeros(nickOld);
		nickNew = appendZeros(nickNew);		
		
		PDU message = new PDU(8 + nickOld.length() + nickNew.length());
		
		message.setByte(0, (byte) OpCodes.UCNICK);
		message.setByte(1, (byte) nickOld.length());
		message.setByte(2, (byte) nickNew.length());
		message.setByte(3, (byte) '\0');
		message.setInt(4, timeStamp);
		message.setSubrange(8, nickOld.getBytes());
		message.setSubrange(8 + nickOld.length(), nickNew.getBytes());
		
		
		System.out.println("\nGenerate package UCNICK");
		System.out.println("OpCode: "+ message.getByte(0));
		System.out.println("oldLength: "+ message.getByte(1));
		System.out.println("newLength: "+ message.getByte(2));
		System.out.println("Pad: "+ message.getByte(3));
		System.out.println("TimeStamp: "+ message.getInt(4));
		System.out.println("NickOld: "+ new String( message.getSubrange(8, message.getByte(1)) ));
		System.out.println("NickNew: "+ new String( message.getSubrange(8+message.getByte(1),message.getByte(2)) ));
		
		
		return message;
	}
	
	/** Append \0 to the string and event out
	 *  the package to even 4 bytes. */
	private static String appendZeros(String[] strArray) {
		String returnStr = "";
		for(String str : strArray)
			returnStr +=  (str + "\0");
		
		while (returnStr.length()%4 != 0)
			returnStr += "\0";
		
		return returnStr;
	}
	
	/** Append \0 to the string and event out
	 *  the package to even 4 bytes. */
	public static String appendZeros(String str) {
		str += "\0";
		
		while (str.length()%4 != 0)
			str += "\0";
		
		return str;
	}
	
	
	public static String[] removeZeros(String str) {
		return str.split("\0");
	}
	
	public static byte[] removeZeros(byte[] bytes) {
		int counter = 0;
		while (bytes[counter] != '\0') {
			counter++;
		}
		
		byte[] newBytes = new byte[counter];
		
		for (int i = 0; i <= counter; i++) {
			newBytes[i] = bytes[i];
		}
		return newBytes;
	}
	
}
