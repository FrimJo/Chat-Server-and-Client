package application;

import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.ListView;
import javafx.scene.control.MenuItem;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.CheckBox;

import java.io.IOException;
import java.net.SocketException;
import java.net.URL;
import java.net.UnknownHostException;
import java.sql.Time;
import java.util.ResourceBundle;

import javafx.scene.input.MouseEvent;


public class Client_GUI implements GUI_Interface_Client{

	private Time time;
	
    @FXML
    private ResourceBundle resources;

    @FXML
    private URL location;

    @FXML
    private MenuItem contextConnect;
    
    @FXML
    private MenuItem contextDisconnect;
    
    @FXML
    private ContextMenu nickViewContext;
    
    @FXML
    private ContextMenu userViewContext;
    
    @FXML
    private MenuItem contextWho;
    
    @FXML
    private Button exitButton;
    
    @FXML
    private Button updateButton;
    
    @FXML
    private Button enterButton;
    
    @FXML
    private ListView<ToServer> ServerView;
    
    @FXML
    private ListView<User> nickView;
    
    @FXML
    private TextField nickField;
    
    @FXML
    private TextField inputField;
    
    @FXML
    private TextField topicField;
    
    @FXML
    private TextField cryptField;
    
    @FXML
    private TextArea outputArea;
    
    @FXML
    private CheckBox zipCheckBox;
    
    @FXML
    void connectClicked(ActionEvent event) {
    	nickEnter(new ActionEvent());
    	if(!this.nickField.getText().equals("")){
    		ToServer selected = this.ServerView.getSelectionModel().getSelectedItem();
        	try {
        		println("Trying to connect to server at " + selected.server_ip + ":" + selected.server_port);
        		Client.INSTANCE.connectToServer(selected, this.nickField.getText());
    			println("Connected to server");
        	} catch (UnknownHostException e) {
        		println("Couldn't connect to server. UnknownHostException");
    		} catch (IOException e) {
    			println("Couldn't connect to server. IOException");
    		}
    	}else{
    		println("Can't connect, please enter a nickname.");
    	}
    }
    
    
    @FXML
    void disconnectClicked(ActionEvent event) {
    	ToServer selected = this.ServerView.getSelectionModel().getSelectedItem();
		try {
			println("Trying to disconnect from server");
			String server_ip = selected.getInetAddress().getHostAddress();
			int server_port = selected.getPort();
			ToServer newServer = new ToServer(server_ip, server_port, this.topicField.getText());
			
			int indexOfOldServer = this.ServerView.getSelectionModel().getSelectedIndex();
			this.ServerView.getItems().remove(indexOfOldServer);
			this.ServerView.getItems().add(indexOfOldServer, newServer);
			
			Client.INSTANCE.disconnectFromServer(selected);
			
			this.nickView.getItems().clear();
			println("Disonnected from server");
		} catch (IOException e) {
			println("Couldn't disconnect from server. IOException, allready disconnected?");
		}
    }
    
    @FXML
    void whoClicked(ActionEvent event) {
    	ToServer selected = this.ServerView.getSelectionModel().getSelectedItem();
    	User user = this.nickView.getSelectionModel().getSelectedItem();
    	try {
			Client.INSTANCE.getUserInfo(user, selected);
		} catch (SocketException e) {
			println("User hans't connected, need to connect to server first to get Who-information.");
		} catch (IOException e) {
			println("Couldn't get Who-information.");
		}
    }

    @FXML
    void exitPressed(ActionEvent event) {
    	try {
    		println("Trying to shutdown");
    		Client.INSTANCE.shutDown(this.ServerView.getItems());
		} catch (IOException e) {
			println("Couldn't shutdown.");
		}
    	Platform.exit();
    }
    
    @FXML
    void updatePressed(ActionEvent event){
    	Client.INSTANCE.getListOfServers();
    }
    
    @FXML
    void enterPressed(ActionEvent event) {
    	inputEnter(new ActionEvent());
    }
    
    @FXML
    void nickEnter(ActionEvent event) {
    	ToServer selected = this.ServerView.getSelectionModel().getSelectedItem();
    	String nick = this.nickField.getText();
    	
    	if(selected == null){
    		println("Please select a server to perform action on.");
    	}else{
	    	try {
	    		println("Trying to change nickname");
	    		println("ToServer: " + selected);
	    		println("Nick: " + nick);
				Client.INSTANCE.changeNick(nick, selected);
				println("Successfully changed nickname");
	    	} catch (SocketException e) {
				println("User hans't connected, need to connect to server first to change Nick.");
			} catch (IOException e) {
				println("Couldn't change nickname.");
			
			}
    	}
    }
    
    @FXML
    void inputEnter(ActionEvent event) {
    	String command = this.inputField.getText();
    	String[] strFirst = command.split(" ", 2);
		if( strFirst[0].equals("connect") ){
			String ipAndPort = command.split(" ", 2)[1];
			String[] strSecond = ipAndPort.split(":", 2);
			if(strSecond.length == 2){
				String server_ip = strSecond[0];
				
				try {
					int server_port = Integer.parseInt( strSecond[1] );
					println("Trying to connect to server at " + server_ip + ":" + server_port);
					
					ToServer server = new ToServer(server_ip, server_port, this.topicField.getText()); 
					addServer(server);
					
					Client.INSTANCE.connectToServer(server, this.nickField.getText());
					
				} catch (NumberFormatException e){
					println("Wrong input parameter: connect connect server_ip:port");
				} catch (UnknownHostException e) {
					println("Couldn't add server. UnknownHostException");
				} catch (IOException e) {
					println("Couldn't add server. IOException");
				}	
			}else{
				println("Wrong input parameter: connect server_ip:port");
			}
		}else{
			sendMessage(command);
		}
		this.inputField.setText("");
    }
    
    @FXML
    void topicEnter(ActionEvent event) {
    	ToServer selected;
    	if( ( selected = this.ServerView.getSelectionModel().getSelectedItem() ) != null){
    		try {
				Client.INSTANCE.setTopic(this.topicField.getText(), selected);
    		} catch (SocketException e) {
				println("User hans't join, need to join server first to change Topic.");
    		} catch (IOException e) {
				println("Couldn't set Topic.");
			}
    	}
    }
    
    @FXML
    void cryptEnter(ActionEvent event) {
    	ToServer server;
    	
    	if( ( server = this.ServerView.getSelectionModel().getSelectedItem() ) != null){
    		String cryptKey = this.cryptField.getText();
    		Client.INSTANCE.setCryptKey(cryptKey, server);
    		println("CryptKey set to: " + cryptKey);
    	}
    	
    }
    
    @FXML
    void serverListClicked(MouseEvent event) {
    	ToServer selected;
    	if( ( selected = this.ServerView.getSelectionModel().getSelectedItem() ) != null){
    		this.topicField.setText(Client.INSTANCE.getTopic(selected));
    		this.cryptField.setText(Client.INSTANCE.getCryptKey(selected));
    	}
    }
    
    
    @FXML
    void initialize() {
    	assert ServerView != null : "fx:id=\"ServerView\" was not injected: check your FXML file 'Client_GUI_Blueprint.fxml'.";
        assert contextConnect != null : "fx:id=\"contextConnect\" was not injected: check your FXML file 'Client_GUI_Blueprint.fxml'.";
        assert contextDisconnect != null : "fx:id=\"contextDisconnect\" was not injected: check your FXML file 'Client_GUI_Blueprint.fxml'.";
        assert contextWho != null : "fx:id=\"contextWho\" was not injected: check your FXML file 'Client_GUI_Blueprint.fxml'.";
        assert cryptField != null : "fx:id=\"cryptField\" was not injected: check your FXML file 'Client_GUI_Blueprint.fxml'.";
        assert enterButton != null : "fx:id=\"enterButton\" was not injected: check your FXML file 'Client_GUI_Blueprint.fxml'.";
        assert exitButton != null : "fx:id=\"exitButton\" was not injected: check your FXML file 'Client_GUI_Blueprint.fxml'.";
        assert inputField != null : "fx:id=\"inputField\" was not injected: check your FXML file 'Client_GUI_Blueprint.fxml'.";
        assert nickField != null : "fx:id=\"nickField\" was not injected: check your FXML file 'Client_GUI_Blueprint.fxml'.";
        assert nickView != null : "fx:id=\"nickView\" was not injected: check your FXML file 'Client_GUI_Blueprint.fxml'.";
        assert nickViewContext != null : "fx:id=\"nickViewContext\" was not injected: check your FXML file 'Client_GUI_Blueprint.fxml'.";
        assert outputArea != null : "fx:id=\"outputArea\" was not injected: check your FXML file 'Client_GUI_Blueprint.fxml'.";
        assert topicField != null : "fx:id=\"topicField\" was not injected: check your FXML file 'Client_GUI_Blueprint.fxml'.";
        assert updateButton != null : "fx:id=\"updateButton\" was not injected: check your FXML file 'Client_GUI_Blueprint.fxml'.";
        assert userViewContext != null : "fx:id=\"userViewContext\" was not injected: check your FXML file 'Client_GUI_Blueprint.fxml'.";
        assert zipCheckBox != null : "fx:id=\"zipCheckBox\" was not injected: check your FXML file 'Client_GUI_Blueprint.fxml'.";

        this.time = new Time(System.currentTimeMillis());
        
        ObservableList<ToServer> serverData = FXCollections.observableArrayList();
        this.ServerView.setItems(serverData);
        
        ObservableList<User> userData = FXCollections.observableArrayList();
        this.nickView.setItems(userData);
        
        Client.INSTANCE.init(this);
    }


	@Override
	public void print(String str) {
		this.outputArea.appendText(str);
	}


	@Override
	public void println(String str) {
		print("(" +  this.time.toString() + ") " + str +'\n');
	}
	
	public void println(String str, int timeStamp){
		print("(" +  timeStamp + ") " + str +'\n');
	}
	
	private void sendMessage(String text){
		cryptEnter(new ActionEvent());
		
		ToServer server = this.ServerView.getSelectionModel().getSelectedItem();
		boolean isSelected = this.zipCheckBox.isSelected();
		int type = MsgTypes.TEXT;
		String cryptKey = this.cryptField.getText();
		if( isSelected && !cryptKey.equals("") ){
			type = MsgTypes.COMPCRYPT;
		}else if( isSelected && cryptKey.equals("") ){
			type = MsgTypes.COMP;
		}else if(!isSelected && !cryptKey.equals("") ){
			type = MsgTypes.CRYPT;
		}
		
		
		try {
			if(server != null){
				Client.INSTANCE.sendMessage(server, type, text);
				println("Message sent.");
			}else{
				println("Pleas select a server.");
			}
			
		} catch (SocketException e1) {
			println("SocketException.");
		} catch (WrongCryptTypeException e2) {
			println("WrongCryptTypeException.");
		} catch (IOException e3) {
			println("IOException.");
		}
	}

	@Override
	public void addServer(ToServer server) {
		println("addserver");
		this.ServerView.getItems().add(server);
		
	}


	@Override
	public void removeServer(ToServer server) {
		this.ServerView.getItems().remove(server);
	}
	
	@Override
	public void updateServer() {
		ObservableList<ToServer> items = this.ServerView.getItems();
		this.ServerView.setItems(null);
		this.ServerView.setItems(items);
	}
	
	
	@Override
	public void updateServer(ToServer newServer, ToServer oldServer) {
		ObservableList<ToServer> items = this.ServerView.getItems();
		if(items.contains(oldServer)){
			int index = items.indexOf(oldServer);
			items.remove(oldServer);
			items.add(index, newServer);
		}
	}
	
	@Override
	public void clearServers(){
		this.ServerView.getItems().clear();
	}


	@Override
	public void addUser(User user) {
		this.nickView.getItems().add(user);
		println("Added user " + user);
	}
	
	@Override
	public void removeUser(User user){
		this.nickView.getItems().remove(user);
	}
	
	@Override
	public void updateUser(User newUser, User oldUser){
		if(oldUser.getNick().equals(this.nickField.getText())){
			this.nickField.setText(newUser.getNick());
		}
		
		ObservableList<User> items = this.nickView.getItems();
		if(items.contains(oldUser)){
			int index = items.indexOf(oldUser);
			println("Found " + oldUser + "at index " + index);
			items.remove(index);
			println("Removed " + oldUser + " from from items at index " + index);
			items.add(index, newUser);
			println("Added " + newUser + " at index: " + index);
			this.nickView.setItems(items);
		}else{
			println("List didn't contain oldUser: " + oldUser);
		}
	}
	@Override
	public void clearUsers(){
		this.nickView.getItems().clear();
	}
	
	@Override
	public void setTopic(String topic) {
		this.topicField.setText(topic);
		println("Topic changed to: " + topic);
	}

	@Override
	public String getTopic() {
		return this.topicField.getText();
	}
	
	@Override
	public void setNick(String nick){
		this.nickField.setText(nick);
	}
	
	@Override
	public String getNick(){
		return this.nickField.getText(); 
	}
}

