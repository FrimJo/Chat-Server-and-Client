package application;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.sql.Time;


public class ToServer extends TCP{
	private static int			threadCounter = 0;
	private String				nick;
	private String				topic;
	private byte[]				cryptKey;
	
	public ToServer(String client_ip, int client_port, String topic) throws UnknownHostException, IOException{
		super("Client thread " + threadCounter++, client_ip, client_port);
		this.nick = null;
		this.topic = topic;
		this.cryptKey = new byte[0];
	}

	public void connect(String nick) throws UnknownHostException, IOException{
		this.nick = nick;
		super.connect();
		super.send(PDU_Factory.join(nick).getBytes());
		System.out.println("JOIN message sent!");
	}
	
	@Override
	public void disconnect() throws IOException{
		if(this.socket != null){
			super.send(PDU_Factory.quit().getBytes());
			super.disconnect();
			System.out.println("QUIT message sent!");
		}		
	}
	
	@Override
	public void receive(byte[] bytes, int bytesRead) throws IOException{
		
		PDU pdu = new PDU(bytes, bytesRead);
		String nick;
		switch(pdu.getByte(0)){
		case OpCodes.NICKS:
			System.out.println("\nReceived PDU NICKS.");
			System.out.println("Op code: " + (byte) pdu.getByte(0));
			System.out.println("nr nicks: " + (byte) pdu.getByte(1));
			System.out.println("Length of string: " + (short) pdu.getShort(2));
			String nicks = new String ( pdu.getSubrange(4, pdu.getShort(2) ), "UTF-8" );
			System.out.println("String: " + nicks);
			
			
			String[] nickList = PDU_Factory.removeZeros(nicks);
			
			Client.INSTANCE.setNick(nickList[0]);
			this.nick = nickList[0];
			
			for(int i = 0; i < nickList.length; i++){
				Client.INSTANCE.addUser(new User(nickList[i]));
			}
			
			break;
		case OpCodes.MESSAGE:
			System.out.println("PDU Length: " + pdu.length());
			System.out.println("\nReceived PDU MESSAGE.");
			System.out.println("OpCode: "+ pdu.getByte(0) );
			System.out.println("Meddelandetyp: "+ pdu.getByte(1));
			System.out.println("Nick l채ngd: "+ pdu.getByte(2));
			System.out.println("Checksumma: "+ pdu.getByte(3));
			//short checksum =  pdu.getByte(3);
			System.out.println("Meddelandel채ngd: "+ pdu.getShort(4));
			System.out.println("Pad: "+ pdu.getShort(6));
			System.out.println("Tidsst채pel: "+ pdu.getInt(8) );
			System.out.println("Nickname: "+ new String( pdu.getSubrange(12 + pdu.getShort(4), pdu.getByte(2)), "UTF-8" ) );
			
			
			
			if (PDU_Factory.checksum(pdu, 3)) {
				System.out.println("Checksum match!");
				String text = "";
				byte[] buffer;
				
				switch (pdu.getByte(1)) {
				case MsgTypes.TEXT:
					System.out.println("MsgTypes.TEXT");
					text = new String(pdu.getSubrange(12, (int) pdu.getShort(4)), "UTF-8");
					break;

				case MsgTypes.COMP:
					System.out.println("MsgTypes.COMP");
					buffer = pdu.getSubrange(12, (int) pdu.getShort(4) );
					PDU compMessage = new PDU( buffer, buffer.length );
					
					if(PDU_Factory.checksum(compMessage, 1)){
						System.out.println("Checksum match! (MsgTypes.COMP)");
						int compLength = compMessage.getShort(2);
						byte[] byteText = compMessage.getSubrange(8, compLength);
						text = PDU_Factory.deCompress(byteText);
					} else {
						System.err.println("Checksum missmatch! (MsgTypes.COMP)");
					}
					
					break;
				case MsgTypes.CRYPT:
					
					System.out.println("MsgTypes.CRYPT");
					buffer = pdu.getSubrange(12, (int) pdu.getShort(4) );
					PDU cryptMessage = new PDU( buffer, buffer.length );
					
					if(PDU_Factory.checksum(cryptMessage, 1)){
						System.out.println("Checksum match! (MsgTypes.CRYPT)");
						int cryptLength = cryptMessage.getShort(2);
						byte[] byteText = cryptMessage.getSubrange(8, cryptLength);
						byteText = PDU_Factory.removeZeros(byteText);
						Crypt.decrypt(byteText, byteText.length, this.cryptKey, this.cryptKey.length);
						text = new String( byteText, "UTF-8");
					}else {
						System.err.println("Checksum missmatch! (MsgTypes.CRYPT)");
					}
					break;
				
				case MsgTypes.COMPCRYPT:
					System.out.println("MsgTypes.COMPCRYPT");
					buffer = pdu.getSubrange(12, (int) pdu.getShort(4) );
					PDU cryptCompMessage = new PDU( buffer, buffer.length );
					
					if(PDU_Factory.checksum(cryptCompMessage, 1)){
						System.out.println("Checksum match! (COMPCRYPT 1)");
						
						System.err.println("buffer.length: " + buffer.length);
						byte[] msgBytes = PDU_Factory.removeZeros(buffer); 
						PDU msgPDU = new PDU( msgBytes, msgBytes.length );
						System.err.println("msgPDU.length: " + msgPDU.length());
						
						int msgLength = msgPDU.getShort(3);
						
						msgBytes = PDU_Factory.removeZeros(msgPDU.getSubrange(8, msgLength));						
						Crypt.decrypt(msgBytes, msgBytes.length, cryptKey, cryptKey.length);
						msgPDU = new PDU(msgBytes, msgBytes.length);
						
						if(PDU_Factory.checksum(msgPDU, 1)){
							System.out.println("Checksum match! (COMPCRYPT 2)");
							
							msgLength = msgPDU.getShort(3);
							msgBytes = PDU_Factory.removeZeros(msgPDU.getSubrange(8, msgLength));
							
							text = PDU_Factory.deCompress(msgBytes);
							
						} else {
							System.err.println("Checksum missmatch! (MsgTypes.COMPCRYPT stage 2)");
						}
					} else {
						System.err.println("Checksum missmatch! (MsgTypes.COMPCRYPT stage 1)");
					}
					break;
				default:
					break;
				}
				Client.INSTANCE.println(text + " (" + pdu.getInt(8) + ")");
				
			}else {
				System.err.println("Checksum missmatch");
			}

			break;
			
		case OpCodes.UINFO:
			System.out.println("\nReceived PDU UINFO");
			System.out.println("OpCode: "+ (byte) pdu.getByte(0));
			System.out.println("Pad: "+ new String( pdu.getSubrange(1, 3), "UTF-8" ));
			System.out.println("Address: "+ InetAddress.getByAddress( pdu.getSubrange(4, 4) ).getHostAddress() );
			
			Client.INSTANCE.println("Who is:" + InetAddress.getByAddress( pdu.getSubrange(4, 4) ).getHostAddress() );
			
			
			
			break;
			
		case OpCodes.UJOIN:
			System.out.println("\nReceived PDU UJOIN.");
			System.out.println("OpCode: "+ pdu.getByte(0));
			System.out.println("Length of nick: "+ pdu.getByte(1));
			System.out.println("Pad: "+ pdu.getShort(2));
			System.out.println("Tidsst채mpel: " + pdu.getInt(4));
			System.out.println("Nickname: "+ new String( pdu.getSubrange(8, pdu.getByte(1)), "UTF-8") );
			nick = new String( pdu.getSubrange(8, pdu.getByte(1)), "UTF-8");
			nick = PDU_Factory.removeZeros(nick)[0];
			
			if( !nick.equals(this.nick) ) {
				Client.INSTANCE.addUser(new User(nick) );
			}
			Client.INSTANCE.println( nick + " joined at: " + new Time(pdu.getInt(4)).toString());
			break;
			
		case OpCodes.ULEAVE:
			System.out.println("\nReceived PDU ULEAVE.");
			System.out.println("OpCode: "+ pdu.getByte(0));
			System.out.println("Length of nick: "+ pdu.getByte(1));
			System.out.println("Pad: "+ pdu.getShort(2));
			System.out.println("TidsstStampel: " + (int) pdu.getInt(4));
			System.out.println("Nickname: "+ new String( pdu.getSubrange(8, pdu.getByte(1)), "UTF-8") );
			
			nick = new String(pdu.getSubrange(8, pdu.getByte(1)), "UTF-8");
			
			Client.INSTANCE.removeUser(new User( nick ));
			
			
			Client.INSTANCE.println("");
			break;
			
		case OpCodes.UCNICK:
			System.out.println("\nReceived PDU UCNICK.");
			System.out.println("OpCode: "+ pdu.getByte(0));
			System.out.println("Length of old nick: "+ pdu.getByte(1));
			System.out.println("Length of new nick: "+ pdu.getByte(2));
			System.out.println("Pad: "+ pdu.getByte(3));
			System.out.println("TidsstStampel: " + pdu.getInt(4));
			
			String nickOld = PDU_Factory.removeZeros(new String( pdu.getSubrange(8, pdu.getByte(1)), "UTF-8" ) )[0];
			System.out.println("NickOld: " + nickOld);
			String nickNew = PDU_Factory.removeZeros(new String( pdu.getSubrange(8 + pdu.getByte(1), pdu.getByte(2)), "UTF-8" ) )[0];
			System.out.println("NickNew: " + nickNew);
			
			if(nickOld.equals(this.nick)){
				this.nick = nickNew;
				Client.INSTANCE.setNick(nickNew);
			}
			
			Client.INSTANCE.updateUser(new User(nickNew), new User(nickOld));
			Client.INSTANCE.println( nickOld + " changed name to " + nickNew + " at: " + new Time(pdu.getInt(4)).toString() );
			break;
			
		case OpCodes.CHTOPIC:
			System.out.println("\nReceived PDU CHTOPIC.");
			System.out.println("OpCode: "+ pdu.getByte(0));
			System.out.println("Length of nick: "+ pdu.getByte(1));
			System.out.println("Pad: "+ pdu.getShort(2) );
			System.out.println("Topic: " + new String( pdu.getSubrange(4, pdu.getByte(1)), "UTF-8" ));
			this.topic = new String( pdu.getSubrange(4, pdu.getByte(1)), "UTF-8" );
			Client.INSTANCE.setTopic(this.topic);
			break;
			
		default:
			System.out.println("Wrong OpCode received from server! receved: " + pdu.getByte(0));
			break;
		}
	}
	
	public void sendPDU(PDU pdu) throws SocketException, IOException {
		if(this.socket != null){
			super.send(pdu.getBytes());
		}else{
			throw new SocketException();
		}
	}
	
	public void getUserInfo(User user) throws SocketException, IOException {
			sendPDU(PDU_Factory.whois( user.getNick() ));
			System.out.println("WHOIS message sent!");
	}
	
	public String getNick(){
		return this.nick;
	}
	
	public void changeNickName(String nick) throws  SocketException, IOException {
		System.out.println("Entered method changeNickName in ToServer");
		if(nick != this.nick){
			sendPDU( PDU_Factory.chnick(nick) );
			System.out.println("CHNICK message sent!");
		}
	}
	
	public String getTopic(){
		return this.topic;
	}
	
	public void setTopic(String topic) throws SocketException, IOException {
		sendPDU(PDU_Factory.chtopic(topic));
		System.out.println("CHTOPIC message sent!");
	}
	
	public void sendMessage(int type, String text) throws SocketException, IOException, WrongCryptTypeException{
		sendPDU(PDU_Factory.message(type, text, this.cryptKey) );
	}
	
	public String getCrypyKey() throws UnsupportedEncodingException {
		return new String(this.cryptKey,"UTF-8");
	}
	
	public void setCryptKey(String cryptKey) throws UnsupportedEncodingException{
		this.cryptKey = cryptKey.getBytes("UTF-8");
	}
	
	@Override
	public boolean equals(Object o){
		if(o == null)
			return false;
		
		if(o.getClass() != this.getClass())
			return false;
		
		ToServer s = (ToServer) o;
		
		if(!s.toString().equals(this.toString()))
			return false;
		
		return true;
	}
	
	@Override
	public String toString(){
		return "[" + this.topic + "]";
	}
	
	
}

